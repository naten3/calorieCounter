package io.abnd.security;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.DefaultTokenServices;
import org.springframework.security.oauth2.provider.token.TokenStore;
import org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore;

import javax.sql.DataSource;

@Configuration
@EnableAuthorizationServer
public class OAuth2ServerConfiguration extends AuthorizationServerConfigurerAdapter{

  private static final Logger LOGGER = LoggerFactory.getLogger(OAuth2ServerConfiguration.class);

  private final String clientID="dietWebapp";
  private final String clientSecret="2kj3fjh23jl";


  @Autowired
  private AuthenticationManager authenticationManager;

  //@Autowired
  //private UserClientDetailsService clientDetailsService;

  @Override
  public void configure(final AuthorizationServerEndpointsConfigurer endpoints)
      throws Exception {
      endpoints
          .tokenStore(tokenStore())
          .authenticationManager(this.authenticationManager);

  }

  @Override
  public void configure(final AuthorizationServerSecurityConfigurer securityConfigurer) {
      //hash passwords using BCrypt
      //securityConfigurer.passwordEncoder(new BCryptPasswordEncoder());
    //securityConfigurer.passwordEncoder(NoOpPasswordEncoder.getInstance());
  }

  @Override
  public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
    clients.inMemory().withClient(clientID).secret(clientSecret);
  }

  @Bean
  @Primary
  public DefaultTokenServices tokenServices() {
      DefaultTokenServices tokenServices = new DefaultTokenServices();
      tokenServices.setTokenStore(tokenStore());
      return tokenServices;
  }

  @Bean
  @Primary
  public TokenStore tokenStore() {
            return new InMemoryTokenStore();
        }

}
