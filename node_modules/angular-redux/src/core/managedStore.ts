import {Store, Middleware, Reducer, createStore, applyMiddleware, combineReducers} from 'redux';
import {List, Map, fromJS} from 'immutable';
import {ManagedReducer} from "./managedReducer";
const thunk: Middleware = require('redux-thunk');

export interface IManagedStore {
  initialState: any;
  middleware: List<Middleware>;
  getStore(): Store;
  addReducer(managedReducer:ManagedReducer): IManagedStore;
  addReducers(managedReducers:ManagedReducer[]): IManagedStore;
}

/**
 * Managed Store wrapper for a Redux store and it's actions and reducers.
 */
export class ManagedStore implements IManagedStore {
  public static instance: ManagedStore = null;

  private _storeInstance: Store = null;
  private _reducers: Map<string, ManagedReducer> = Map<string, ManagedReducer>();
  private _initialState:any;

  get initialState():any {
    return this._initialState.toJS();
  }
  set initialState(value: any) {
    this._initialState = fromJS(value);
  }
  public middleware: List<Middleware> = List<Middleware>().push(thunk);

  addReducer(managedReducer:ManagedReducer): IManagedStore {
    this._reducers = this._reducers.set(
      managedReducer.identifier,
      managedReducer
    );
    return this;
  }

  addReducers(managedReducers:ManagedReducer[]): IManagedStore {
    managedReducers.map(this.addReducer.bind(this));
    return this;
  }

  getStore(): Store {
    if (this._storeInstance === null) {
      if (!this._initialState) throw new Error('Missing required initial state.');
      if (this._reducers.size === 0) throw new Error('No reducers defined. Need atleast one reducer for the store.');
      const creator = applyMiddleware(thunk, ...this.middleware.toArray())(createStore);
      const createdReducers = this._reducers.map(reducer => reducer.create());
      const rootReducer = combineReducers(createdReducers.toJS());
      this._storeInstance = creator(rootReducer, this._initialState.toJS());
    }
    return this._storeInstance;
  }

  static initialize(callback): Store {
    if (ManagedStore.instance !== null) throw new Error('Unable to reinitialize a read-only singleton.');
    if (!callback) throw new Error('Missing the required callback for instance configuration.');
    const instance = new ManagedStore();
    callback(instance);
    ManagedStore.instance = instance;
    return instance.getStore();
  }

  static destroy() {
    delete ManagedStore['instance'];
    ManagedStore['instance'] = null;
  }
}

export default ManagedStore;