import ManagedStore from '../core/managedStore';
import Connector from '../core/connector';

/**
 * A decorator that binds the decorated component with the specified redux store instance.
 * @param mapStateToTarget Function to map the store state for the component.
 * @param mapDispatchToTarget Function to map dispatcher actions to the store.
 */
export function ConnectToStore(mapStateToTarget?: Function, mapDispatchToTarget?: Function) {
  return function (target) {
    let originalInit, unsubscribe, originalDestroy;
    // Bind initialization to lifecycle handler
    if (target.prototype.ngOnInit) originalInit = target.prototype.ngOnInit;
    target.prototype.ngOnInit = function () {
      const finalMapStateToTarget = mapStateToTarget
        ? mapStateToTarget.bind(this)
        : this['mapStateToTarget'].bind(this);
      const finalMapDispatchToTarget = mapDispatchToTarget
        ? mapDispatchToTarget.bind(this)
        : this['mapDispatchToTarget'].bind(this);
      const connector = new Connector().map(finalMapStateToTarget, finalMapDispatchToTarget);
      unsubscribe = connector.connect(this);
      this.store = connector.store;
      if (originalInit) originalInit.apply(void 0, arguments);
    };

    // Bind unsubscription to lifecycle handler
    if (target.prototype.ngOnDestroy) originalDestroy = target.prototype.ngOnDestroy;
    target.prototype.ngOnDestroy = function () {
      unsubscribe();
      if (originalDestroy) originalDestroy.apply(void 0, arguments);
    };
  }
}