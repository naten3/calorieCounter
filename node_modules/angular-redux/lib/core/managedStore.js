var redux_1 = require('redux');
var immutable_1 = require('immutable');
var thunk = require('redux-thunk');
/**
 * Managed Store wrapper for a Redux store and it's actions and reducers.
 */
var ManagedStore = (function () {
    function ManagedStore() {
        this._storeInstance = null;
        this._reducers = immutable_1.Map();
        this.middleware = immutable_1.List().push(thunk);
    }
    Object.defineProperty(ManagedStore.prototype, "initialState", {
        get: function () {
            return this._initialState.toJS();
        },
        set: function (value) {
            this._initialState = immutable_1.fromJS(value);
        },
        enumerable: true,
        configurable: true
    });
    ManagedStore.prototype.addReducer = function (managedReducer) {
        this._reducers = this._reducers.set(managedReducer.identifier, managedReducer);
        return this;
    };
    ManagedStore.prototype.addReducers = function (managedReducers) {
        managedReducers.map(this.addReducer.bind(this));
        return this;
    };
    ManagedStore.prototype.getStore = function () {
        if (this._storeInstance === null) {
            if (!this._initialState)
                throw new Error('Missing required initial state.');
            if (this._reducers.size === 0)
                throw new Error('No reducers defined. Need atleast one reducer for the store.');
            var creator = redux_1.applyMiddleware.apply(void 0, [thunk].concat(this.middleware.toArray()))(redux_1.createStore);
            var createdReducers = this._reducers.map(function (reducer) { return reducer.create(); });
            var rootReducer = redux_1.combineReducers(createdReducers.toJS());
            this._storeInstance = creator(rootReducer, this._initialState.toJS());
        }
        return this._storeInstance;
    };
    ManagedStore.initialize = function (callback) {
        if (ManagedStore.instance !== null)
            throw new Error('Unable to reinitialize a read-only singleton.');
        if (!callback)
            throw new Error('Missing the required callback for instance configuration.');
        var instance = new ManagedStore();
        callback(instance);
        ManagedStore.instance = instance;
        return instance.getStore();
    };
    ManagedStore.destroy = function () {
        delete ManagedStore['instance'];
        ManagedStore['instance'] = null;
    };
    ManagedStore.instance = null;
    return ManagedStore;
})();
exports.ManagedStore = ManagedStore;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ManagedStore;
//# sourceMappingURL=managedStore.js.map