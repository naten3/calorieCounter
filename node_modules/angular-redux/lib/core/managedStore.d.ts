import { Store, Middleware } from 'redux';
import { List } from 'immutable';
import { ManagedReducer } from "./managedReducer";
export interface IManagedStore {
    initialState: any;
    middleware: List<Middleware>;
    getStore(): Store;
    addReducer(managedReducer: ManagedReducer): IManagedStore;
    addReducers(managedReducers: ManagedReducer[]): IManagedStore;
}
/**
 * Managed Store wrapper for a Redux store and it's actions and reducers.
 */
export declare class ManagedStore implements IManagedStore {
    static instance: ManagedStore;
    private _storeInstance;
    private _reducers;
    private _initialState;
    initialState: any;
    middleware: List<Middleware>;
    addReducer(managedReducer: ManagedReducer): IManagedStore;
    addReducers(managedReducers: ManagedReducer[]): IManagedStore;
    getStore(): Store;
    static initialize(callback: any): Store;
    static destroy(): void;
}
export default ManagedStore;
