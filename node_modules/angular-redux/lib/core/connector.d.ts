import { Store, Dispatch } from 'redux';
/** @module core/Connector */
/**
 * The Connector-class provides the application with shared store connector functionality.
 * @class
 * */
export declare class Connector {
    static instance: any;
    private _defaultMapStateToTarget;
    private _defaultMapDispatchToTarget;
    private _store;
    constructor();
    /**
     * Runs the new state through the scope mapping functions and validates that the result implements
     * required immutable methods.
     * @param state The current state.
     * @param mapStateToScope The scope mapping function.
     * @returns {Map<any, any>} The mapped state.
     */
    mapAndValidateState(state: any, mapStateToScope: Function): any;
    /**
     * Applies the updated state to the target Object.
     * @param target The target Object.
     * @param state Current state.
     * @param dispatch Store dispatch Object.
     */
    updateTarget(target: any, state: any, dispatch: Dispatch): void;
    /**
     * Prepares a connect function that allows mapping of the given stores state to a target Object.
     * @param mapStateToTarget Function for mapping the state to the target scope.
     * @param mapDispatchToTarget Function for mapping the actions to the dispatcher.
     * @returns {function((Function|Object)): Function} Prepared connect function that can apply the connection to
     * the target Object.
     */
    map(mapStateToTarget?: Function, mapDispatchToTarget?: Function): {
        connect: (target: Function | Object) => Function;
        store: Store;
    };
}
export default Connector;
