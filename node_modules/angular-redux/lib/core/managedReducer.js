var immutable_1 = require('immutable');
// TODO: Find a way to build a hierarchical structure for reducers
var ManagedReducer = (function () {
    function ManagedReducer(identifier, initialState, actionHandlers) {
        this._createdReducer = null;
        this._actionHandlers = immutable_1.Map();
        if (identifier === undefined)
            throw new Error('Missing a required identifier for the reducer.');
        this.identifier = identifier;
        if (initialState === undefined)
            throw new Error('Missing a required initialState for the reducer.');
        this._initialState = immutable_1.fromJS(initialState);
        if (actionHandlers)
            this.addActionHandlers(actionHandlers);
    }
    ManagedReducer.prototype.addActionHandler = function (identifier, handler) {
        this._actionHandlers = this._actionHandlers.set(identifier, handler);
        return this;
    };
    ManagedReducer.prototype.addActionHandlers = function (actions) {
        var _this = this;
        Object.keys(actions).map(function (key) { return _this.addActionHandler(key, actions[key]); });
        return this;
    };
    ManagedReducer.prototype.setInitialState = function (initialState) {
        this._initialState = immutable_1.fromJS(initialState);
        return this;
    };
    ManagedReducer.prototype.create = function () {
        var _this = this;
        if (this._createdReducer !== null)
            return this._createdReducer;
        var lockedActions = this._actionHandlers.toMap();
        return this._createdReducer = function (state, action) {
            if (state === void 0) { state = _this._initialState; }
            if (action === void 0) { action = null; }
            state = immutable_1.fromJS(state);
            if (action === null)
                return state; // TODO: Throw error or die silently?
            if (!lockedActions.has(action.type))
                return state;
            var actionHandler = lockedActions.get(action.type);
            return actionHandler(state, action);
        };
    };
    return ManagedReducer;
})();
exports.ManagedReducer = ManagedReducer;
//# sourceMappingURL=managedReducer.js.map