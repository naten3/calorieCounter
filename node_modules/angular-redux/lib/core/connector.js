var immutable_1 = require('immutable');
var _ = require('lodash');
var wrapActionCreators_1 = require('../utils/wrapActionCreators');
var shallowEqual_1 = require('../utils/shallowEqual');
var managedStore_1 = require('./managedStore');
/** @module core/Connector */
/**
 * The Connector-class provides the application with shared store connector functionality.
 * @class
 * */
var Connector = (function () {
    function Connector() {
        this._defaultMapStateToTarget = (function (state) {
            return state;
        });
        this._defaultMapDispatchToTarget = function (dispatch) { return dispatch; };
        this._store = managedStore_1.ManagedStore.instance.getStore();
    }
    /**
     * Runs the new state through the scope mapping functions and validates that the result implements
     * required immutable methods.
     * @param state The current state.
     * @param mapStateToScope The scope mapping function.
     * @returns {Map<any, any>} The mapped state.
     */
    Connector.prototype.mapAndValidateState = function (state, mapStateToScope) {
        var newState = mapStateToScope(state);
        if (!newState) {
            return state;
        }
        return newState;
    };
    /**
     * Applies the updated state to the target Object.
     * @param target The target Object.
     * @param state Current state.
     * @param dispatch Store dispatch Object.
     */
    Connector.prototype.updateTarget = function (target, state, dispatch) {
        state = state.toJS();
        if (_.isFunction(target)) {
            target(state, dispatch);
        }
        else {
            Object.assign(target, state, dispatch);
        }
    };
    /**
     * Prepares a connect function that allows mapping of the given stores state to a target Object.
     * @param mapStateToTarget Function for mapping the state to the target scope.
     * @param mapDispatchToTarget Function for mapping the actions to the dispatcher.
     * @returns {function((Function|Object)): Function} Prepared connect function that can apply the connection to
     * the target Object.
     */
    Connector.prototype.map = function (mapStateToTarget, mapDispatchToTarget) {
        var _this = this;
        var finalMapStateToTarget = mapStateToTarget || this._defaultMapStateToTarget;
        var finalMapDispatchToTarget = _.isPlainObject(mapDispatchToTarget)
            ? wrapActionCreators_1.default(mapDispatchToTarget)
            : mapDispatchToTarget || this._defaultMapDispatchToTarget;
        var targetState = this.mapAndValidateState(immutable_1.fromJS(this._store.getState()), finalMapStateToTarget);
        var actions = finalMapDispatchToTarget(this._store.dispatch);
        return {
            connect: function (target) {
                _this.updateTarget(target, targetState, actions);
                return _this._store.subscribe(function () {
                    var nextState = _this.mapAndValidateState(immutable_1.fromJS(_this._store.getState()), finalMapStateToTarget);
                    if (!shallowEqual_1.default(targetState, nextState)) {
                        targetState = nextState;
                        _this.updateTarget(target, targetState, actions);
                    }
                });
            },
            store: this._store
        };
    };
    Connector.instance = null;
    return Connector;
})();
exports.Connector = Connector;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Connector;
//# sourceMappingURL=connector.js.map