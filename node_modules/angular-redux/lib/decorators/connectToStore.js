var connector_1 = require('../core/connector');
/**
 * A decorator that binds the decorated component with the specified redux store instance.
 * @param mapStateToTarget Function to map the store state for the component.
 * @param mapDispatchToTarget Function to map dispatcher actions to the store.
 */
function ConnectToStore(mapStateToTarget, mapDispatchToTarget) {
    return function (target) {
        var originalInit, unsubscribe, originalDestroy;
        // Bind initialization to lifecycle handler
        if (target.prototype.ngOnInit)
            originalInit = target.prototype.ngOnInit;
        target.prototype.ngOnInit = function () {
            var finalMapStateToTarget = mapStateToTarget
                ? mapStateToTarget.bind(this)
                : this['mapStateToTarget'].bind(this);
            var finalMapDispatchToTarget = mapDispatchToTarget
                ? mapDispatchToTarget.bind(this)
                : this['mapDispatchToTarget'].bind(this);
            var connector = new connector_1.default().map(finalMapStateToTarget, finalMapDispatchToTarget);
            unsubscribe = connector.connect(this);
            this.store = connector.store;
            if (originalInit)
                originalInit.apply(void 0, arguments);
        };
        // Bind unsubscription to lifecycle handler
        if (target.prototype.ngOnDestroy)
            originalDestroy = target.prototype.ngOnDestroy;
        target.prototype.ngOnDestroy = function () {
            unsubscribe();
            if (originalDestroy)
                originalDestroy.apply(void 0, arguments);
        };
    };
}
exports.ConnectToStore = ConnectToStore;
//# sourceMappingURL=connectToStore.js.map